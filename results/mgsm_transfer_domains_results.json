[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is a important practice that allow the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To alow LLM thinking before answering, we need to set the an addtional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (22.7%, 38.3%), Median: 30.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (24.9%, 31.1%), Median: 28.0%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (31.6%, 38.1%), Median: 34.9%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (74.9%, 80.6%), Median: 77.8%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (86.6%, 91.0%), Median: 88.9%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (12.6%, 17.5%), Median: 15.0%",
        "test_fitness_DROP": "95% Bootstrap Confidence Interval: (61.3%, 67.9%), Median: 64.6%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (21.9%, 37.5%), Median: 29.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (25.1%, 31.4%), Median: 28.2%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (34.4%, 41.1%), Median: 37.8%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (75.4%, 81.1%), Median: 78.2%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (86.8%, 91.1%), Median: 89.0%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (13.0%, 18.0%), Median: 15.5%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attemps and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (22.7%, 38.3%), Median: 30.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (24.5%, 30.6%), Median: 27.5%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (35.5%, 42.2%), Median: 38.9%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (75.6%, 81.2%), Median: 78.5%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (87.0%, 91.4%), Median: 89.2%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (12.8%, 17.6%), Median: 15.1%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (24.2%, 39.8%), Median: 32.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (35.6%, 42.4%), Median: 39.0%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (40.2%, 47.0%), Median: 43.6%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (73.0%, 78.9%), Median: 76.0%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (86.6%, 91.0%), Median: 88.9%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (14.8%, 20.0%), Median: 17.4%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the invovled principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (19.5%, 35.2%), Median: 27.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (28.0%, 34.4%), Median: 31.1%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (28.2%, 34.8%), Median: 31.5%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (73.1%, 79.0%), Median: 76.1%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (85.4%, 90.0%), Median: 87.8%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (10.0%, 14.6%), Median: 12.2%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 33.6%), Median: 25.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (20.9%, 26.8%), Median: 23.8%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (24.9%, 31.1%), Median: 28.0%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (66.5%, 72.9%), Median: 69.8%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (77.4%, 82.9%), Median: 80.1%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (11.8%, 16.6%), Median: 14.1%"
    },
    {
        "thought": "Similar to Auto-GPT, we can use dynamic control flow in the design to let agent decide what should be the next query.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (21.1%, 36.7%), Median: 28.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (27.0%, 33.4%), Median: 30.1%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (33.6%, 40.4%), Median: 37.0%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (69.9%, 76.0%), Median: 73.0%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (80.5%, 85.8%), Median: 83.1%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (15.4%, 20.8%), Median: 18.0%"
    },
    {
        "thought": "**Insights:**\nThe core idea of role-playing where agents assume roles such as 'teacher,' 'student,' and 'verifier' is innovative. By adding a step where the verifier provides feedback to both the teacher and student, we create a more dynamic feedback loop, which can lead to better explanations and solutions.\n\n**Overall Idea:**\nThe enhanced architecture will involve a 'teacher' agent providing explanations and hints, a 'student' agent attempting to solve the task, and a 'verifier' agent checking the student's solution while also providing feedback to the 'teacher' and 'student.' This feedback loop will ensure continuous improvement in both the explanations and solutions.\n\n**Implementation:**\n1. The Teacher Agent will explain the task and provide hints or feedback.\n2. The Student Agent will attempt to solve the task based on the Teacher's input.\n3. The Verifier Agent will review the Student's answer and provide feedback to both the Teacher and Student.\n4. The Teacher and Student agents will refine their explanations and solutions based on the Verifier's feedback.",
        "name": "Dynamic Role-Playing Architecture",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Teacher agent to explain the task and provide feedback\n    teacher_instruction = \"Please explain the task in detail and provide any necessary hints or steps to solve it.\"\n\n    # Instruction for the Student agent to solve the task based on the Teacher's explanation\n    student_instruction = \"Using the Teacher's explanation and feedback, please solve the task step by step.\"\n\n    # Instruction for the Verifier agent to review the Student's answer and provide a final decision\n    verifier_instruction = \"Please review the Student's answer, verify its correctness, and provide a final decision. Also, give feedback on the Teacher's explanation and the Student's approach.\"\n\n    # Initialize the Teacher, Student, and Verifier agents\n    teacher_agent = LLMAgentBase(['explanation'], 'Teacher Agent')\n    student_agent = LLMAgentBase(['thinking', 'answer'], 'Student Agent')\n    verifier_agent = LLMAgentBase(['final_verdict', 'teacher_feedback', 'student_feedback'], 'Verifier Agent')\n\n    # Teacher agent provides explanation and hints\n    teacher_output = teacher_agent([taskInfo], teacher_instruction)\n    explanation = teacher_output[0]\n\n    # Student agent attempts to solve the task based on Teacher's explanation\n    student_output = student_agent([taskInfo, explanation], student_instruction)\n    thinking, answer = student_output\n\n    # Verifier agent reviews the Student's answer and provides feedback\n    verifier_output = verifier_agent([taskInfo, thinking, answer], verifier_instruction)\n    final_verdict, teacher_feedback, student_feedback = verifier_output\n\n    # Teacher agent refines the explanation based on Verifier's feedback\n    refined_teacher_output = teacher_agent([taskInfo, teacher_feedback], teacher_instruction)\n    refined_explanation = refined_teacher_output[0]\n\n    # Student agent refines the solution based on refined Teacher's explanation and Verifier's feedback\n    refined_student_output = student_agent([taskInfo, refined_explanation, student_feedback], student_instruction)\n    refined_thinking, refined_answer = refined_student_output\n\n    # Return the final answer\n    return refined_answer\n",
        "fitness": "95% Bootstrap Confidence Interval: (46.1%, 63.3%), Median: 54.7%",
        "generation": 4,
        "test_fitness": "95% Bootstrap Confidence Interval: (49.9%, 56.9%), Median: 53.4%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (66.2%, 72.6%), Median: 69.5%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (78.8%, 84.1%), Median: 81.5%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (89.9%, 93.6%), Median: 91.8%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (28.0%, 34.5%), Median: 31.2%",
        "test_fitness_DROP": "95% Bootstrap Confidence Interval: (65.1%, 66.9%), Median: 70.4%",
        "test_fitness_MMLU": "95% Bootstrap Confidence Interval: (59.0%, 65.8%), Median: 62.4%",
        "test_fitness_GPQA": "95% Bootstrap Confidence Interval: (25.5%, 31.7%), Median: 28.6%"
    },
    {
        "thought": "**Insights:**\nThe integration of visual and textual feedback loops shows promise, but it needs to be more structured to ensure meaningful feedback and effective utilization of intermediate outputs.\n\n**Overall Idea:**\nThe revised architecture will incorporate structured feedback loops where visual and textual agents not only refine each other's outputs but also provide specific feedback that the other agent can utilize meaningfully. This approach should enhance the coherence of problem-solving by effectively leveraging both modalities.\n\n**Implementation:**\n1. Generate an initial visual representation of the problem.\n2. Use the initial visual representation to generate an initial textual reasoning.\n3. Provide structured feedback from the textual agent to the visual agent and vice versa iteratively.\n4. Finalize the problem-solving using the refined visual and textual representations.",
        "name": "Structured Multimodal Feedback Loop",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating visual representation of the problem\n    visual_instruction = 'Please create a visual representation (e.g., diagram, graph) of the given problem.'\n\n    # Instruction for generating initial textual reasoning\n    initial_cot_instruction = 'Using the provided visual representation, think step by step and solve the problem.'\n\n    # Instructions for refining visual representation and textual reasoning based on structured feedback\n    refine_visual_instruction = 'Based on the textual reasoning provided, refine the visual representation to improve clarity and accuracy.'\n    refine_cot_instruction = 'Using the refined visual representation, update your step-by-step reasoning to solve the problem.'\n\n    # Instantiate the visual representation agent and Chain-of-Thought agent\n    visual_agent = LLMAgentBase(['visual'], 'Visual Representation Agent')\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Maximum number of refinement iterations\n    max_iterations = 3\n\n    # Generate the initial visual representation of the problem\n    visual_output = visual_agent([taskInfo], visual_instruction)\n    visual_representation = visual_output[0]  # Using Info object directly\n\n    # Generate the initial textual reasoning\n    initial_output = cot_agent([taskInfo, visual_representation], initial_cot_instruction)\n    thinking, answer = initial_output  # Using Info objects directly\n\n    for i in range(max_iterations):\n        # Refine the visual representation based on textual reasoning\n        visual_output = visual_agent([taskInfo, thinking], refine_visual_instruction)\n        refined_visual = visual_output[0]  # Using Info object directly\n\n        # Refine the textual reasoning based on the refined visual representation\n        cot_output = cot_agent([taskInfo, refined_visual], refine_cot_instruction)\n        thinking, answer = cot_output  # Using Info objects directly\n\n    # Finalize the problem-solving using the refined visual and textual representations\n    final_output = cot_agent([taskInfo, refined_visual, thinking], initial_cot_instruction)\n    final_thinking, final_answer = final_output  # Using Info objects directly\n\n    return final_answer\n",
        "fitness": "95% Bootstrap Confidence Interval: (42.2%, 59.4%), Median: 50.8%",
        "generation": 6,
        "test_fitness": "95% Bootstrap Confidence Interval: (46.8%, 53.8%), Median: 50.2%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (61.1%, 67.9%), Median: 64.5%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (80.0%, 85.2%), Median: 82.6%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (87.8%, 91.9%), Median: 89.9%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (27.0%, 33.4%), Median: 30.1%",
        "test_fitness_DROP": "95% Bootstrap Confidence Interval: (65.2%, 66.9%), Median: 70.4%",
        "test_fitness_MMLU": "95% Bootstrap Confidence Interval: (63.7%, 70.2%), Median: 67.0%",
        "test_fitness_GPQA": "95% Bootstrap Confidence Interval: (25.7%, 31.8%), Median: 28.7%"
    },
    {
        "thought": "**Insights:**\nOne key insight from existing approaches is the synergy between visual aids and textual reasoning. However, the interaction between these modalities has been limited to a single verification step. We can enhance this by introducing a dynamic feedback loop where the visual and textual reasoning agents iteratively refine each other's outputs.\n**Overall Idea:**\nThe new architecture will involve a dynamic feedback loop between the visual representation agent and the Chain-of-Thought agent. This iterative process will allow the visual representation to be continuously refined based on textual reasoning, and vice versa. This approach aims to create a more accurate and coherent problem-solving process by leveraging the strengths of both modalities.\n**Implementation:**\n1. Generate an initial visual representation of the problem.\n2. Use the initial visual representation to generate an initial textual reasoning.\n3. Iteratively refine the visual representation and textual reasoning based on feedback from each other.\n4. Finalize the problem-solving using the refined visual and textual representations.",
        "name": "Interactive Multimodal Feedback Loop",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating visual representation of the problem\n    visual_instruction = 'Please create a visual representation (e.g., diagram, graph) of the given problem.'\n\n    # Instruction for generating initial textual reasoning\n    initial_cot_instruction = 'Using the provided visual representation, think step by step and solve the problem.'\n\n    # Instruction for refining visual representation based on textual reasoning\n    refine_visual_instruction = 'Based on the textual reasoning, refine the visual representation for better clarity and accuracy.'\n\n    # Instruction for refining textual reasoning based on visual representation\n    refine_cot_instruction = 'Using the refined visual representation, update your step-by-step reasoning to solve the problem.'\n\n    # Instantiate the visual representation agent and Chain-of-Thought agent\n    visual_agent = LLMAgentBase(['visual'], 'Visual Representation Agent')\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Maximum number of refinement iterations\n    max_iterations = 3\n\n    # Generate the initial visual representation of the problem\n    visual_output = visual_agent([taskInfo], visual_instruction)\n    visual_representation = visual_output[0]  # Using Info object directly\n\n    # Generate the initial textual reasoning\n    initial_output = cot_agent([taskInfo, visual_representation], initial_cot_instruction)\n    thinking, answer = initial_output  # Using Info objects directly\n\n    for i in range(max_iterations):\n        # Refine the visual representation based on textual reasoning\n        visual_output = visual_agent([taskInfo, thinking], refine_visual_instruction)\n        refined_visual = visual_output[0]  # Using Info object directly\n\n        # Refine the textual reasoning based on the refined visual representation\n        cot_output = cot_agent([taskInfo, refined_visual], refine_cot_instruction)\n        thinking, answer = cot_output  # Using Info objects directly\n\n    # Finalize the problem-solving using the refined visual and textual representations\n    final_output = cot_agent([taskInfo, refined_visual, thinking], initial_cot_instruction)\n    final_thinking, final_answer = final_output  # Using Info objects directly\n\n    return final_answer\n",
        "fitness": "95% Bootstrap Confidence Interval: (38.3%, 55.5%), Median: 46.9%",
        "generation": 3,
        "test_fitness": "95% Bootstrap Confidence Interval: (43.9%, 50.9%), Median: 47.4%",
        "test_fitness_gsm8k": "95% Bootstrap Confidence Interval: (61.5%, 68.1%), Median: 64.9%",
        "test_fitness_SVAMP": "95% Bootstrap Confidence Interval: (77.9%, 83.4%), Median: 80.6%",
        "test_fitness_Asdiv": "95% Bootstrap Confidence Interval: (87.6%, 91.8%), Median: 89.8%",
        "test_fitness_GSMHARD": "95% Bootstrap Confidence Interval: (24.5%, 30.8%), Median: 27.6%",
        "test_fitness_DROP": "95% Bootstrap Confidence Interval: (66.8%, 68.4%), Median: 71.9%",
        "test_fitness_MMLU": "95% Bootstrap Confidence Interval: (61.4%, 68.0%), Median: 64.8%",
        "test_fitness_GPQA": "95% Bootstrap Confidence Interval: (26.7%, 33.0%), Median: 29.9%"
    }
]